import { EventDispatcher } from '../core/EventDispatcher';
declare class AnimationMixer extends EventDispatcher {
    _controlInterpolantsResultBuffer: Float32Array;
    _root: any;
    _accuIndex: any;
    time: any;
    timeScale: any;
    _bindingsByRootAndName: any;
    _actionsByClip: any;
    _actions: any;
    _nActiveActions: any;
    _bindings: any;
    _nActiveBindings: any;
    _controlInterpolants: any;
    _nActiveControlInterpolants: any;
    stats: any;
    constructor(root: any);
    _bindAction(action: any, prototypeAction: any): void;
    _activateAction(action: any): void;
    _deactivateAction(action: any): void;
    _initMemoryManager(): void;
    _isActiveAction(action: any): boolean;
    _addInactiveAction(action: any, clipUuid: any, rootUuid: any): void;
    _removeInactiveAction(action: any): void;
    _removeInactiveBindingsForAction(action: any): void;
    _lendAction(action: any): void;
    _takeBackAction(action: any): void;
    _addInactiveBinding(binding: any, rootUuid: any, trackName: any): void;
    _removeInactiveBinding(binding: any): void;
    _lendBinding(binding: any): void;
    _takeBackBinding(binding: any): void;
    _lendControlInterpolant(): any;
    _takeBackControlInterpolant(interpolant: any): void;
    clipAction(clip: any, optionalRoot: any): any;
    existingAction(clip: any, optionalRoot: any): any;
    stopAllAction(): this;
    update(deltaTime: any): this;
    getRoot(): any;
    uncacheClip(clip: any): void;
    uncacheRoot(root: any): void;
    uncacheAction(clip: any, optionalRoot: any): void;
}
export { AnimationMixer };
