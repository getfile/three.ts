import { Vector3 } from '../math/Vector3';
import { Sphere } from './Sphere';
import { BufferAttribute } from '../core/BufferAttribute';
import { Object3D } from '../core/Object3D';
import { Plane } from './Plane';
declare class Box3 {
    min: Vector3;
    max: Vector3;
    constructor(min?: Vector3, max?: Vector3);
    set(min: any, max: any): Box3;
    setFromArray(array: number[]): Box3;
    setFromBufferAttribute(attribute: BufferAttribute): Box3;
    setFromPoints(points: Vector3[]): Box3;
    setFromCenterAndSize(center: Vector3, size: Vector3): Box3;
    setFromObject(object: Object3D): Box3;
    clone(): Box3;
    copy(box: Box3): Box3;
    makeEmpty(): Box3;
    isEmpty(): boolean;
    getCenter(optionalTarget?: Vector3): Vector3;
    getSize(optionalTarget?: Vector3): Vector3;
    expandByPoint(point: Vector3): Box3;
    expandByVector(vector: Vector3): Box3;
    expandByScalar(scalar: number): Box3;
    private traverse(node);
    expandByObject(object: Object3D): Box3;
    containsPoint(point: Vector3): boolean;
    containsBox(box: Box3): boolean;
    getParameter(point: any, optionalTarget: any): Vector3;
    intersectsBox(box: Box3): boolean;
    intersectsSphere(sphere: Sphere): boolean;
    intersectsPlane(plane: Plane): boolean;
    clampPoint(point: Vector3, optionalTarget?: any): Vector3;
    distanceToPoint(point: Vector3): number;
    getBoundingSphere(optionalTarget?: Sphere): Sphere;
    intersect(box: Box3): Box3;
    union(box: Box3): Box3;
    applyMatrix4(matrix: any): Box3;
    translate(offset: Vector3): Box3;
    equals(box: Box3): boolean;
}
export { Box3 };
