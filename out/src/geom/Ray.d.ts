import { Vector3 } from '../math/Vector3';
import { Matrix4 } from '../math/Matrix4';
import { Box3 } from './Box3';
import { Plane } from './Plane';
import { Sphere } from './Sphere';
declare class Ray {
    origin: Vector3;
    direction: Vector3;
    constructor(origin?: Vector3, direction?: Vector3);
    set(origin: any, direction: any): Ray;
    clone(): Ray;
    copy(ray: Ray): Ray;
    at(t: number, optionalTarget?: Vector3): Vector3;
    lookAt(v: Vector3): Ray;
    recast(t: number): Ray;
    closestPointToPoint(point: Vector3, optionalTarget?: Vector3): Vector3;
    distanceToPoint(point: Vector3): number;
    distanceSqToPoint(point: Vector3): number;
    distanceSqToSegment(v0: Vector3, v1: Vector3, optionalPointOnRay?: Vector3, optionalPointOnSegment?: Vector3): number;
    intersectSphere(sphere: Sphere, optionalTarget: Vector3): Vector3;
    intersectsSphere(sphere: Sphere): boolean;
    distanceToPlane(plane: Plane): number;
    intersectPlane(plane: Plane, optionalTarget?: Vector3): Vector3;
    intersectsPlane(plane: Plane): boolean;
    intersectBox(box: Box3, optionalTarget: Vector3): Vector3;
    intersectsBox(box: Box3): boolean;
    intersectTriangle(a: Vector3, b: Vector3, c: Vector3, backfaceCulling: boolean, optionalTarget: Vector3): Vector3;
    applyMatrix4(matrix4: Matrix4): Ray;
    equals(ray: Ray): boolean;
}
export { Ray };
