import { Vector4 } from '../../math/Vector4';
import { WebGLExtensions } from "./WebGLExtensions";
import { WebGLUtils } from "./WebGLUtils";
declare class ColorBuffer {
    locked: boolean;
    currentColorMask: boolean;
    currentColorClear: Vector4;
    gl: WebGLRenderingContext;
    constructor(gl: any);
    setMask(colorMask: boolean): void;
    setLocked(lock: boolean): void;
    setClear(r: any, g: any, b: any, a: any, premultipliedAlpha?: boolean): void;
    reset(): void;
}
declare class DepthBuffer {
    gl: WebGLRenderingContext;
    container: WebGLState;
    locked: boolean;
    currentDepthMask: boolean;
    currentDepthFunc: number;
    currentDepthClear: number;
    constructor(gl: any, container: any);
    setTest(depthTest: any): void;
    setMask(depthMask: boolean): void;
    setFunc(depthFunc: number): void;
    setLocked(lock: any): void;
    setClear(depth: any): void;
    reset(): void;
}
declare class StencilBuffer {
    gl: WebGLRenderingContext;
    container: WebGLState;
    locked: any;
    currentStencilMask: any;
    currentStencilFunc: any;
    currentStencilRef: any;
    currentStencilFuncMask: any;
    currentStencilFail: any;
    currentStencilZFail: any;
    currentStencilZPass: any;
    currentStencilClear: any;
    constructor(gl: any, container: any);
    setTest(stencilTest: any): void;
    setMask(stencilMask: any): void;
    setFunc(stencilFunc: any, stencilRef: any, stencilMask: any): void;
    setOp(stencilFail: any, stencilZFail: any, stencilZPass: any): void;
    setLocked(lock: any): void;
    setClear(stencil: any): void;
    reset(): void;
}
declare class WebGLState {
    gl: WebGLRenderingContext;
    extensions: WebGLExtensions;
    utils: WebGLUtils;
    enabledAttributes: Uint8Array;
    newAttributes: Uint8Array;
    attributeDivisors: Uint8Array;
    capabilities: any;
    compressedTextureFormats: any;
    currentTextureSlot: any;
    currentBoundTextures: any;
    currentProgram: any;
    currentBlending: any;
    currentFlipSided: any;
    currentCullFace: any;
    colorBuffer: ColorBuffer;
    depthBuffer: DepthBuffer;
    stencilBuffer: StencilBuffer;
    currentScissor: Vector4;
    currentViewport: Vector4;
    emptyTextures: any;
    maxTextures: any;
    currentLineWidth: any;
    lineWidthAvailable: any;
    currentPolygonOffsetFactor: any;
    currentPolygonOffsetUnits: any;
    currentBlendEquation: any;
    currentBlendSrc: any;
    currentBlendDst: any;
    currentBlendEquationAlpha: any;
    currentBlendSrcAlpha: any;
    currentBlendDstAlpha: any;
    currentPremultipledAlpha: any;
    buffers: {
        color: ColorBuffer;
        depth: DepthBuffer;
        stencil: StencilBuffer;
    };
    constructor(gl: any, extensions: any, utils: any);
    createTexture(type: any, target: any, count: number): WebGLTexture;
    initAttributes(): void;
    enableAttribute(attribute: number): void;
    enableAttributeAndDivisor(attribute: any, meshPerAttribute: any): void;
    disableUnusedAttributes(): void;
    enable(id: any): void;
    disable(id: any): void;
    getCompressedTextureFormats(): any;
    useProgram(program: any): boolean;
    setBlending(blending: any, blendEquation?: any, blendSrc?: any, blendDst?: any, blendEquationAlpha?: any, blendSrcAlpha?: any, blendDstAlpha?: any, premultipliedAlpha?: any): void;
    setMaterial(material: any, frontFaceCW: any): void;
    setFlipSided(flipSided: any): void;
    setCullFace(cullFace: any): void;
    setLineWidth(width: any): void;
    setPolygonOffset(polygonOffset: any, factor: any, units: any): void;
    setScissorTest(scissorTest: any): void;
    activeTexture(webglSlot?: any): void;
    bindTexture(webglType: any, webglTexture: any): void;
    compressedTexImage2D(...args: any[]): void;
    texImage2D(...args: any[]): void;
    scissor(scissor: Vector4): void;
    viewport(viewport: Vector4): void;
    reset(): void;
}
export { ColorBuffer, DepthBuffer, StencilBuffer, WebGLState };
