declare class WebGLState {
    gl: any;
    extensions: any;
    utils: any;
    enabledAttributes: any;
    capabilities: any;
    compressedTextureFormats: any;
    currentTextureSlot: any;
    currentBoundTextures: any;
    currentProgram: any;
    currentBlending: any;
    currentFlipSided: any;
    currentCullFace: any;
    colorBuffer: any;
    depthBuffer: any;
    stencilBuffer: any;
    currentScissor: any;
    currentViewport: any;
    emptyTextures: any;
    maxTextures: any;
    currentLineWidth: any;
    lineWidthAvailable: any;
    currentPolygonOffsetFactor: any;
    currentPolygonOffsetUnits: any;
    currentBlendEquation: any;
    currentBlendSrc: any;
    currentBlendDst: any;
    currentBlendEquationAlpha: any;
    currentBlendSrcAlpha: any;
    currentBlendDstAlpha: any;
    currentPremultipledAlpha: any;
    newAttributes: any;
    attributeDivisors: any;
    buffers: any;
    constructor(gl: any, extensions: any, utils: any);
    createTexture(type: any, target: any, count: any): any;
    initAttributes(): void;
    enableAttribute(attribute: any): void;
    enableAttributeAndDivisor(attribute: any, meshPerAttribute: any): void;
    disableUnusedAttributes(): void;
    enable(id: any): void;
    disable(id: any): void;
    getCompressedTextureFormats(): any;
    useProgram(program: any): boolean;
    setBlending(blending: any, blendEquation?: any, blendSrc?: any, blendDst?: any, blendEquationAlpha?: any, blendSrcAlpha?: any, blendDstAlpha?: any, premultipliedAlpha?: any): void;
    setMaterial(material: any, frontFaceCW: any): void;
    setFlipSided(flipSided: any): void;
    setCullFace(cullFace: any): void;
    setLineWidth(width: any): void;
    setPolygonOffset(polygonOffset: any, factor: any, units: any): void;
    setScissorTest(scissorTest: any): void;
    activeTexture(webglSlot?: any): void;
    bindTexture(webglType: any, webglTexture: any): void;
    compressedTexImage2D(): void;
    texImage2D(): void;
    scissor(scissor: any): void;
    viewport(viewport: any): void;
    reset(): void;
}
export { WebGLState };
