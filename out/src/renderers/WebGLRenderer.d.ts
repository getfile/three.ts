declare class WebGLRenderer {
    context: any;
    domElement: any;
    autoClear: any;
    autoClearColor: any;
    autoClearDepth: any;
    autoClearStencil: any;
    sortObjects: any;
    clippingPlanes: any;
    localClippingEnabled: any;
    gammaFactor: any;
    gammaInput: any;
    gammaOutput: any;
    physicallyCorrectLights: any;
    toneMapping: any;
    toneMappingExposure: any;
    toneMappingWhitePoint: any;
    maxMorphTargets: any;
    maxMorphNormals: any;
    lightsArray: any;
    shadowsArray: any;
    currentRenderList: any;
    spritesArray: any;
    flaresArray: any;
    _gl: any;
    _sphere: any;
    _isContextLost: any;
    _currentRenderTarget: any;
    _currentFramebuffer: any;
    _currentMaterialId: any;
    _currentGeometryProgram: any;
    _currentCamera: any;
    _currentArrayCamera: any;
    _currentViewport: any;
    _currentScissor: any;
    _currentScissorTest: any;
    _usedTextureUnits: any;
    _width: any;
    _height: any;
    _pixelRatio: any;
    _viewport: any;
    _scissor: any;
    _scissorTest: any;
    _frustum: any;
    _clipping: any;
    _clippingEnabled: any;
    _localClippingEnabled: any;
    _projScreenMatrix: any;
    _vector3: any;
    _infoMemory: any;
    _infoRender: any;
    info: any;
    _canvas: any;
    shadowMap: any;
    vr: any;
    capabilities: any;
    state: any;
    utils: any;
    properties: any;
    textures: any;
    attributes: any;
    geometries: any;
    objects: any;
    morphtargets: any;
    programCache: any;
    lights: any;
    renderLists: any;
    background: any;
    bufferRenderer: any;
    indexedBufferRenderer: any;
    flareRenderer: any;
    spriteRenderer: any;
    parameters: any;
    onAnimationFrame: any;
    isAnimating: any;
    constructor(parameters: any);
    getTargetPixelRatio(): any;
    extensions: any;
    _premultipliedAlpha: any;
    initGLContext(): void;
    getContext(): any;
    getContextAttributes(): any;
    forceContextLoss(): void;
    forceContextRestore(): void;
    getPixelRatio(): any;
    setPixelRatio(value: any): void;
    getSize(): {
        width: any;
        height: any;
    };
    setSize(width: any, height: any, updateStyle: any): void;
    getDrawingBufferSize(): {
        width: number;
        height: number;
    };
    setDrawingBufferSize(width: any, height: any, pixelRatio: any): void;
    setViewport(x: any, y: any, width: any, height: any): void;
    setScissor(x: any, y: any, width: any, height: any): void;
    setScissorTest(boolean: any): void;
    getClearColor(): any;
    setClearColor(): void;
    getClearAlpha(): any;
    setClearAlpha(): void;
    clear(color: any, depth: any, stencil: any): void;
    clearColor(): void;
    clearDepth(): void;
    clearStencil(): void;
    clearTarget(renderTarget: any, color: any, depth: any, stencil: any): void;
    dispose(): void;
    onContextLost(event: any): void;
    onContextRestore(): void;
    onMaterialDispose(event: any): void;
    deallocateMaterial(material: any): void;
    releaseMaterialProgramReference(material: any): void;
    renderObjectImmediate(object: any, program: any, material: any): void;
    renderBufferImmediate(object: any, program: any, material: any): void;
    renderBufferDirect(camera: any, fog: any, geometry: any, material: any, object: any, group: any): void;
    setupVertexAttributes(material: any, program: any, geometry: any, startIndex?: any): void;
    compile(scene: any, camera: any): void;
    start(): void;
    loop(time: any): void;
    animate(callback: any): void;
    render(scene: any, camera: any, renderTarget: any, forceClear: any): void;
    projectObject(object: any, camera: any, sortObjects: any): void;
    renderObjects(renderList: any, scene: any, camera: any, overrideMaterial?: any): void;
    renderObject(object: any, scene: any, camera: any, geometry: any, material: any, group: any): void;
    initMaterial(material: any, fog: any, object: any): void;
    setProgram(camera: any, fog: any, material: any, object: any): any;
    refreshUniformsCommon(uniforms: any, material: any): void;
    refreshUniformsLine(uniforms: any, material: any): void;
    refreshUniformsDash(uniforms: any, material: any): void;
    refreshUniformsPoints(uniforms: any, material: any): void;
    refreshUniformsFog(uniforms: any, fog: any): void;
    refreshUniformsLambert(uniforms: any, material: any): void;
    refreshUniformsPhong(uniforms: any, material: any): void;
    refreshUniformsToon(uniforms: any, material: any): void;
    refreshUniformsStandard(uniforms: any, material: any): void;
    refreshUniformsPhysical(uniforms: any, material: any): void;
    refreshUniformsDepth(uniforms: any, material: any): void;
    refreshUniformsDistance(uniforms: any, material: any): void;
    refreshUniformsNormal(uniforms: any, material: any): void;
    markUniformsLightsNeedsUpdate(uniforms: any, value: any): void;
    setFaceCulling(cullFace: any, frontFaceDirection: any): void;
    allocTextureUnit(): any;
    setTexture2D(texture: any, slot: any): void;
    setTexture(texture: any, slot: any): void;
    setTextureCube(texture: any, slot: any): void;
    getRenderTarget(): any;
    setRenderTarget(renderTarget: any): void;
    readRenderTargetPixels(renderTarget: any, x: any, y: any, width: any, height: any, buffer: any): void;
}
export { WebGLRenderer };
