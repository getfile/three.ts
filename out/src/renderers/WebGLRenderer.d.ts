import { Frustum } from '../geom/Frustum';
import { Sphere } from "../geom/Sphere";
import { Vector4 } from '../math/Vector4';
import { Vector3 } from '../math/Vector3';
import { Color } from '../math/Color';
import { Matrix4 } from '../math/Matrix4';
import { Camera } from "../cameras/Camera";
import { Scene } from "../scenes/Scene";
import { WebGLFlareRenderer } from './webgl/WebGLFlareRenderer';
import { WebGLSpriteRenderer } from './webgl/WebGLSpriteRenderer';
import { WebGLShadowMap } from './webgl/WebGLShadowMap';
import { WebGLAttributes } from './webgl/WebGLAttributes';
import { WebGLBackground } from './webgl/WebGLBackground';
import { WebGLRenderLists, WebGLRenderList } from './webgl/WebGLRenderLists';
import { WebGLMorphtargets } from './webgl/WebGLMorphtargets';
import { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer';
import { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer';
import { WebGLGeometries } from './webgl/WebGLGeometries';
import { WebGLLights } from './webgl/WebGLLights';
import { WebGLObjects } from './webgl/WebGLObjects';
import { WebGLPrograms } from './webgl/WebGLPrograms';
import { WebGLTextures } from './webgl/WebGLTextures';
import { WebGLProperties } from './webgl/WebGLProperties';
import { WebGLState } from './webgl/WebGLState';
import { WebGLCapabilities } from './webgl/WebGLCapabilities';
import { WebVRManager } from './webvr/WebVRManager';
import { WebGLExtensions } from './webgl/WebGLExtensions';
import { WebGLClipping } from './webgl/WebGLClipping';
import { WebGLUtils } from './webgl/WebGLUtils';
import { WebGLRenderTarget } from './WebGLRenderTarget';
import { ArrayCamera } from '../cameras/ArrayCamera';
import { Light } from '../lights/Light';
import { Sprite } from '../objects/Sprite';
declare class WebGLRenderer {
    domElement: any;
    autoClear: any;
    autoClearColor: any;
    autoClearDepth: any;
    autoClearStencil: any;
    sortObjects: any;
    clippingPlanes: any;
    localClippingEnabled: any;
    gammaFactor: number;
    gammaInput: boolean;
    gammaOutput: boolean;
    physicallyCorrectLights: boolean;
    toneMapping: any;
    toneMappingExposure: any;
    toneMappingWhitePoint: any;
    maxMorphTargets: any;
    maxMorphNormals: any;
    currentRenderList: WebGLRenderList;
    lightsArray: Light[];
    shadowsArray: any;
    spritesArray: Sprite[];
    flaresArray: any;
    _gl: WebGLRenderingContext;
    _sphere: Sphere;
    _isContextLost: boolean;
    _currentRenderTarget: WebGLRenderTarget;
    _currentFramebuffer: WebGLFramebuffer;
    _currentMaterialId: number;
    _currentGeometryProgram: string;
    _currentCamera: Camera;
    _currentArrayCamera: ArrayCamera;
    _currentViewport: Vector4;
    _currentScissor: Vector4;
    _currentScissorTest: any;
    _usedTextureUnits: any;
    _width: number;
    _height: number;
    _pixelRatio: number;
    _viewport: Vector4;
    _scissor: Vector4;
    _scissorTest: boolean;
    _frustum: Frustum;
    _clipping: WebGLClipping;
    _clippingEnabled: boolean;
    _localClippingEnabled: boolean;
    _projScreenMatrix: Matrix4;
    _vector3: Vector3;
    _infoMemory: any;
    _infoRender: any;
    info: any;
    _canvas: HTMLCanvasElement;
    shadowMap: WebGLShadowMap;
    vr: WebVRManager;
    capabilities: WebGLCapabilities;
    state: WebGLState;
    utils: WebGLUtils;
    properties: WebGLProperties;
    textures: WebGLTextures;
    attributes: WebGLAttributes;
    geometries: WebGLGeometries;
    objects: WebGLObjects;
    morphtargets: WebGLMorphtargets;
    programCache: WebGLPrograms;
    lights: WebGLLights;
    renderLists: WebGLRenderLists;
    background: WebGLBackground;
    bufferRenderer: WebGLBufferRenderer;
    indexedBufferRenderer: WebGLIndexedBufferRenderer;
    flareRenderer: WebGLFlareRenderer;
    spriteRenderer: WebGLSpriteRenderer;
    parameters: any;
    onAnimationFrame: any;
    isAnimating: any;
    extensions: WebGLExtensions;
    _premultipliedAlpha: any;
    constructor(parameters: any);
    getTargetPixelRatio(): number;
    initGLContext(): void;
    getContext(): WebGLRenderingContext;
    getContextAttributes(): WebGLContextAttributes;
    forceContextLoss(): void;
    forceContextRestore(): void;
    getPixelRatio(): number;
    setPixelRatio(value: number): void;
    getSize(): {
        width: number;
        height: number;
    };
    setSize(width: number, height: number, updateStyle?: boolean): void;
    getDrawingBufferSize(): {
        width: number;
        height: number;
    };
    setDrawingBufferSize(width: any, height: any, pixelRatio: any): void;
    setViewport(x: any, y: any, width: any, height: any): void;
    setScissor(x: any, y: any, width: any, height: any): void;
    setScissorTest(boolean: any): void;
    getClearColor(): Color;
    setClearColor(): void;
    getClearAlpha(): number;
    setClearAlpha(): void;
    clear(color?: boolean, depth?: boolean, stencil?: boolean): void;
    clearColor(): void;
    clearDepth(): void;
    clearStencil(): void;
    clearTarget(renderTarget: any, color: any, depth: any, stencil: any): void;
    dispose(): void;
    onContextLost(event: any): void;
    onContextRestore(): void;
    onMaterialDispose(event: any): void;
    deallocateMaterial(material: any): void;
    releaseMaterialProgramReference(material: any): void;
    renderObjectImmediate(object: any, program: any, material: any): void;
    renderBufferImmediate(object: any, program: any, material: any): void;
    renderBufferDirect(camera: any, fog: any, geometry: any, material: any, object: any, group: any): void;
    setupVertexAttributes(material: any, program: any, geometry: any, startIndex?: any): void;
    compile(scene: any, camera: any): void;
    start(): void;
    loop(time: any): void;
    animate(callback: any): void;
    render(scene: Scene, camera: Camera, renderTarget?: any, forceClear?: any): void;
    projectObject(object: any, camera: any, sortObjects: any): void;
    renderObjects(renderList: any, scene: any, camera: any, overrideMaterial?: any): void;
    renderObject(object: any, scene: any, camera: any, geometry: any, material: any, group: any): void;
    initMaterial(material: any, fog: any, object: any): void;
    setProgram(camera: any, fog: any, material: any, object: any): any;
    refreshUniformsCommon(uniforms: any, material: any): void;
    refreshUniformsLine(uniforms: any, material: any): void;
    refreshUniformsDash(uniforms: any, material: any): void;
    refreshUniformsPoints(uniforms: any, material: any): void;
    refreshUniformsFog(uniforms: any, fog: any): void;
    refreshUniformsLambert(uniforms: any, material: any): void;
    refreshUniformsPhong(uniforms: any, material: any): void;
    refreshUniformsToon(uniforms: any, material: any): void;
    refreshUniformsStandard(uniforms: any, material: any): void;
    refreshUniformsPhysical(uniforms: any, material: any): void;
    refreshUniformsDepth(uniforms: any, material: any): void;
    refreshUniformsDistance(uniforms: any, material: any): void;
    refreshUniformsNormal(uniforms: any, material: any): void;
    markUniformsLightsNeedsUpdate(uniforms: any, value: any): void;
    setFaceCulling(cullFace: any, frontFaceDirection: any): void;
    allocTextureUnit(): any;
    setTexture2D(texture: any, slot: any): void;
    setTexture(texture: any, slot: any): void;
    setTextureCube(texture: any, slot: any): void;
    getRenderTarget(): WebGLRenderTarget;
    setRenderTarget(renderTarget: WebGLRenderTarget): void;
    readRenderTargetPixels(renderTarget: any, x: any, y: any, width: any, height: any, buffer: any): void;
}
export { WebGLRenderer };
