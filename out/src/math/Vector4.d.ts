import { Matrix4 } from './Matrix4';
import { Quaternion } from './Quaternion';
declare class Vector4 {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    set(x: number, y: number, z: number, w: number): Vector4;
    setScalar(scalar: number): Vector4;
    setX(x: any): Vector4;
    setY(y: any): Vector4;
    setZ(z: any): Vector4;
    setW(w: any): Vector4;
    setComponent(index: any, value: any): Vector4;
    getComponent(index: any): number;
    clone(): Vector4;
    copy(v: Vector4): Vector4;
    add(v: any, w?: Vector4): Vector4;
    addScalar(s: any): Vector4;
    addVectors(a: Vector4, b: Vector4): Vector4;
    addScaledVector(v: Vector4, s: any): Vector4;
    sub(v: Vector4, w: Vector4): Vector4;
    subScalar(s: any): Vector4;
    subVectors(a: Vector4, b: Vector4): Vector4;
    multiplyScalar(scalar: any): Vector4;
    applyMatrix4(m: Matrix4): this;
    divideScalar(scalar: any): Vector4;
    setAxisAngleFromQuaternion(q: Quaternion): this;
    setAxisAngleFromRotationMatrix(m: Matrix4): Vector4;
    min(v: Vector4): Vector4;
    max(v: Vector4): Vector4;
    clamp(min: Vector4, max: Vector4): Vector4;
    clampScalar(minVal: number, maxVal: number): Vector4;
    clampLength(min: any, max: any): Vector4;
    floor(): Vector4;
    ceil(): Vector4;
    round(): Vector4;
    roundToZero(): Vector4;
    negate(): Vector4;
    dot(v: Vector4): number;
    lengthSq(): number;
    length(): number;
    manhattanLength(): number;
    normalize(): Vector4;
    setLength(length: any): Vector4;
    lerp(v: any, alpha: any): Vector4;
    lerpVectors(v1: any, v2: any, alpha: any): Vector4;
    equals(v: any): boolean;
    fromArray(array: any, offset: any): Vector4;
    toArray(array: Array<number>, offset: any): Array<number>;
    fromBufferAttribute(attribute: any, index: any, offset: any): Vector4;
}
export { Vector4 };
