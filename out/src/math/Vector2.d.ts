declare class Vector2 {
    isVector2: boolean;
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    width: number;
    height: number;
    set(x: number, y: number): Vector2;
    setScalar(scalar: number): Vector2;
    setX(x: any): Vector2;
    setY(y: any): Vector2;
    setComponent(index: number, value: number): Vector2;
    getComponent(index: number): number;
    clone(): Vector2;
    copy(v: Vector2): Vector2;
    add(v: Vector2, w?: Vector2): Vector2;
    addScalar(s: number): Vector2;
    addVectors(a: Vector2, b: Vector2): Vector2;
    addScaledVector(v: Vector2, s: number): Vector2;
    sub(v: Vector2, w?: Vector2): Vector2;
    subScalar(s: number): Vector2;
    subVectors(a: Vector2, b: Vector2): Vector2;
    multiply(v: any): Vector2;
    multiplyScalar(scalar: number): Vector2;
    divide(v: Vector2): Vector2;
    divideScalar(scalar: number): Vector2;
    applyMatrix3(m: any): Vector2;
    min(v: Vector2): Vector2;
    max(v: Vector2): Vector2;
    clamp(min: Vector2, max: Vector2): Vector2;
    clampScalar(minVal: number, maxVal: number): Vector2;
    clampLength(min: any, max: any): Vector2;
    floor(): Vector2;
    ceil(): Vector2;
    round(): Vector2;
    roundToZero(): Vector2;
    negate(): Vector2;
    dot(v: any): number;
    lengthSq(): number;
    length(): number;
    manhattanLength(): number;
    normalize(): Vector2;
    angle(): number;
    distanceTo(v: Vector2): number;
    distanceToSquared(v: any): number;
    manhattanDistanceTo(v: any): number;
    setLength(length: any): Vector2;
    lerp(v: any, alpha: any): Vector2;
    lerpVectors(v1: Vector2, v2: Vector2, alpha: number): Vector2;
    equals(v: any): boolean;
    fromArray(array: Array<number>, offset?: number): Vector2;
    toArray(array?: Array<number>, offset?: number): Array<number>;
    fromBufferAttribute(attribute: any, index: number): Vector2;
    rotateAround(center: Vector2, angle: number): Vector2;
}
export { Vector2 };
