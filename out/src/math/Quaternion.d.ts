import { Vector3 } from './Vector3';
import { Euler } from './Euler';
import { Matrix4 } from "./Matrix4";
declare class Quaternion {
    private onChangeCallback;
    private _x;
    private _y;
    private _z;
    private _w;
    constructor(x?: number, y?: number, z?: number, w?: number);
    slerpFlat(dst: number[], dstOffset: number, src0: number[], srcOffset0: number, src1: number[], srcOffset1: number, t: number): void;
    x: number;
    y: number;
    z: number;
    w: number;
    set(x: number, y: number, z: number, w: number): Quaternion;
    clone(): Quaternion;
    copy(quaternion: Quaternion): Quaternion;
    setFromEuler(euler: Euler, update?: boolean): this;
    setFromAxisAngle(axis: Vector3, angle: number): this;
    setFromRotationMatrix(m: Matrix4): this;
    setFromUnitVectors(vFrom: Vector3, vTo: Vector3): this;
    inverse(): this;
    conjugate(): this;
    dot(v: Quaternion): number;
    lengthSq(): number;
    length(): number;
    normalize(): this;
    multiply(q: Quaternion): this;
    premultiply(q: Quaternion): this;
    multiplyQuaternions(a: Quaternion, b: Quaternion): this;
    slerp(qb: Quaternion, t: number): Quaternion;
    equals(quaternion: Quaternion): boolean;
    fromArray(array: number[], offset: number): this;
    toArray(array: number[], offset?: number): number[];
    onChange(callback: any): this;
}
export { Quaternion };
